package application;

/**
 * A road class that represents a road connecting one town to another.
 * @author Marcus Brooks
 *
 */
public class Road implements Comparable<Road> {
	private String name;
	private Town startTown;
	private Town endTown;
	private int distance;
	/**
	 * Creates a new road with the starting town, ending town, distance between in miles, and the name of the road
	 * @param startTown The starting town
	 * @param endTown The ending town
	 * @param distance The distance in miles
	 * @param name The name of the town
	 */
	public Road (Town startTown, Town endTown, int distance, String name) {
		this.name = name;
		this.startTown = startTown;
		this.endTown = endTown;
		this.distance = distance;
	}
	/**
	 * Creates a new road with the starting town, ending town, a distance of 1 mile, and the name of the road
	 * @param startTown The starting town
	 * @param endTown The ending town
	 * @param name The name of the road
	 */
	public Road (Town startTown, Town endTown, String name) {
		this.startTown = startTown;
		this.endTown = endTown;
		this.name = name;
		this.distance = 1;
	}
	/**
	 * Returns the starting town
	 * @return The starting town
	 */
	public Town getStartTown() {
		return this.startTown;
	}
	/**
	 * Sets the starting town
	 * @param startTown The starting town
	 */
	public void setStartTown(Town startTown) {
		this.startTown = startTown;
	}
	/**
	 * Returns the ending town
	 * @return The ending town
	 */
	public Town getEndTown() {
		return this.endTown;
	}
	/**
	 * Sets the ending town
	 * @param endTown The ending town
	 */
	public void setEndTown(Town endTown) {
		this.endTown = endTown;
	}
	/**
	 * Returns the distance in miles
	 * @return The distance in miles
	 */
	public int getDistance() {
		return this.distance;
	}
	/**
	 * Sets the distance in miles
	 * @param distance The distance in miles
	 */
	public void setDistance(int distance) {
		this.distance = distance;
	}
	/**
	 * Returns the name of the road
	 * @return The name of the road
	 */
	public String getName() {
		return this.name;
	}
	/**
	 * Sets the name of the road
	 * @param name The name of the road
	 */
	public void setName(String name) {
		this.name = name;
	}
	/**
	 * Overridden equals method which compares based on name
	 * @param otherObject The object to compare to
	 */
	public boolean equals(Object otherObject) {
		if (otherObject == null) {
			return false;
		}
		if(!(otherObject instanceof Road)) {
			return false;
		}
		Road otherRoad = (Road) otherObject;
		return this.name.toLowerCase().equals(otherRoad.getName().toLowerCase());
	}
	/**
	 * Returns the hashcode generated by the name string of this road
	 */
	public int hashCode() {
		return name.hashCode();
	}
	/**
	 * Compares this road to another road based on name. 0 if they are equal, positive integer if this road's name is greater than the other road's name, negative integer if this road's name is lesser than the other road's name
	 * @param otherRoad The road to compare to
	 */
	public int compareTo(Road otherRoad) {
		return this.name.toLowerCase().compareTo(otherRoad.getName().toLowerCase());
	}
	/**
	 * Overridden toString() method which returns the name of this road
	 */
	public String toString() {
		return this.name;
	}
}